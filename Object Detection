import cv2 as cv
import numpy as np

import cv2 as cv
import numpy as np

# stacking --> all images in one window


def stackImages(scale, imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range(0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape[:2]:
                    imgArray[x][y] = cv.resize(
                        imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv.resize(
                        imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2:
                    imgArray[x][y] = cv.cvtColor(
                        imgArray[x][y], cv.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv.resize(
                    imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv.resize(
                    imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None, scale, scale)
            if len(imgArray[x].shape) == 2:
                imgArray[x] = cv.cvtColor(imgArray[x], cv.COLOR_GRAY2BGR)
        hor = np.hstack(imgArray)
        ver = hor
    return ver

# due to all to fullfil the requirements of arguments we declear an empty function


def empty(a):
    pass


# create a window for color adjustment
cv.namedWindow('contras')
# resize window
cv.resizeWindow('contras', 800, 300)
# create a bar in window
cv.createTrackbar('HUE MIN', 'contras', 0, 179, empty)
cv.createTrackbar('HUE MAX', 'contras', 16, 179, empty)
cv.createTrackbar('SAT MIN', 'contras', 58, 255, empty)
cv.createTrackbar('SAT MAX', 'contras', 255, 255, empty)
cv.createTrackbar('VAL MIN', 'contras', 90, 255, empty)
cv.createTrackbar('VAL MAX', 'contras', 255, 255, empty)

# for countinous change observing
while True:
    img = cv.imread("C:\\Users\\ABC\\Desktop\\car1.jpg")
    # img = cv.resize(oimg, (700, 400))
    # img = cv.imread("C:\\Users\\ABC\\Desktop\\car2.jpg")
    img_hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
    # capture the postion of trackbar
    hue_min = cv.getTrackbarPos('HUE MIN', 'contras')
    hue_max = cv.getTrackbarPos('HUE MAX', 'contras')
    sat_min = cv.getTrackbarPos('SAT MIN', 'contras')
    sat_max = cv.getTrackbarPos('SAT MAX', 'contras')
    val_min = cv.getTrackbarPos('VAL MIN', 'contras')
    val_max = cv.getTrackbarPos('VAL MAX', 'contras')
    print(hue_min, hue_max, sat_min, sat_max, val_min, val_max)
    # lower bound
    lower = np.array([hue_min, sat_min, val_min])
    # upper bound
    upper = np.array([hue_max, sat_max, val_max])
    # masking
    mask = cv.inRange(img_hsv, lower, upper)
    # bitwise operation
    img_result = cv.bitwise_and(img, img, mask=mask)
    # stackImages
    imgStack = stackImages(0.6, ([img, img_hsv], [mask, img_result]))
    cv.imshow('Stack Images', imgStack)

    # cv.imshow("car1", img)
    # cv.imshow("car1 hsv", img_hsv)
    # cv.imshow("result", img_result)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break
